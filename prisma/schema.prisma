// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Posts {
//   id         Int       @id @default(autoincrement())
//   userId     String    @db.Uuid
//   name       String
//   image      String
//   text       String
//   picture    String
//   createdAt  DateTime  @default(now())
//   likes      Likes[]
// }

// model Likes {
//   id         Int       @id @default(autoincrement())
//   userId     String    @db.Uuid
//   postId     Int
//   createdAt  DateTime  @default(now())
//   post       Posts     @relation(fields: [postId], references: [id], onDelete: Cascade)
// }

// Define the UserType enum
enum UserType {
  Master
  Player
}

// Define the User model
model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  userType  UserType
  points    Point[]
  // redeemedRewards  Reward[]  @relation("RedeemedRewards", references: [id])
}

// Define the Point model
model Point {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  pointsEarned  Int
  pointsRedeemed Int
  timestamp     DateTime @default(now())
}

// Define the Reward model
// model Reward {
//   id              Int      @id @default(autoincrement())
//   rewardName      String
//   pointCost       Int
//   availableQuantity Int
//   redeemedBy       User[]   @relation("UserToReward", fields: [userId], references: [id])
// }

// Define the Log model
// model Log {
//   id        Int       @id @default(autoincrement())
//   user      User      @relation(fields: [userId], references: [id])
//   userId    Int
//   action    String
//   timestamp DateTime  @default(now())
// }